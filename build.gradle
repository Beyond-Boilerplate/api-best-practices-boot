plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'

}

group = 'com.github.sardul3.io'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// DB related
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'


	// Redis and Caching
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Spring Boot Dev Tools (optional for development)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
	testCompileOnly 'org.projectlombok:lombok:1.18.34'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

	// using new @Observed
	implementation "org.springframework.boot:spring-boot-starter-aop"
	// enabled endpoint and expose metrics
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "io.micrometer:micrometer-registry-prometheus"
	// handle lifecycle of a span
	implementation "io.micrometer:micrometer-tracing-bridge-brave"
	// send span and trace data
	// endpoint is defaulted to "http://locahost:9411/api/v2/spans" by actuator
	implementation "io.zipkin.reporter2:zipkin-reporter-brave"
	// send logs by log Appender through URL
	implementation "com.github.loki4j:loki-logback-appender:1.4.0-rc2"

	// Bucket4J Core for rate limiting
	implementation 'com.bucket4j:bucket4j-core:8.9.0'
	// Bucket4J Redis integration using Lettuce
	implementation 'com.bucket4j:bucket4j-redis:8.9.0'
	// Lettuce for Redis client
	implementation 'io.lettuce:lettuce-core:6.3.1.RELEASE'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	implementation 'org.springframework.boot:spring-boot-starter-hateoas'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Define the exclusions once
def jacocoExclusions = [
		'**/models/**',      // Exclude all classes under models package
		'**/configs/**',     // Exclude all classes under configs package
		'**/ApiBestPracticesBootApplication.class'  // Exclude main application class
]

tasks.jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusions)
		}))
	}
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			// Apply to the entire project, with specific exclusions
			excludes = jacocoExclusions
			limit {
				counter = 'INSTRUCTION'   // You can use 'LINE', 'BRANCH', etc. instead of 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.10            // Set the overall project coverage threshold to 80%
			}
		}
	}
}

tasks.check {
	dependsOn tasks.jacocoTestCoverageVerification
}

springBoot {
	mainClass = 'com.github.sardul3.io.api_best_practices_boot.ApiBestPracticesBootApplication'  // Replace with your actual main class
}
