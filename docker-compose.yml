
services:
    # Resources Section (Redis)
    redis-master:
        image: redis:6.2
        container_name: redis-master
        command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
        volumes:
            - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
            - redis-master-data:/data
        ports:
            - "6379:6379"
        networks:
            - app-network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        environment:
            - REDIS_PASSWORD=yourpassword

    redis-sentinel:
        image: redis:6.2
        container_name: redis-sentinel
        command: [ "redis-sentinel", "/usr/local/etc/redis/sentinel.conf" ]
        volumes:
            - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf
        ports:
            - "26379:26379"
        depends_on:
            redis-master:
                condition: service_healthy
        networks:
            - app-network

    # Application Section (Spring App and JMeter)
    spring-app:
        build:
            context: ../
            dockerfile: Dockerfile
        container_name: spring-app
        environment:
            - SPRING_DATA_REDIS_HOST=redis-master
            - SPRING_DATA_REDIS_PORT=6379
            - SPRING_DATA_REDIS_PASSWORD=yourpassword
        ports:
            - "8080:8080"
        depends_on:
            redis-master:
                condition: service_healthy  # Wait for Redis to be healthy
        networks:
            - app-network
        healthcheck:
            test: "curl --fail --silent http://localhost:8080/actuator/health/readiness | grep UP || exit 1"
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    jmeter:
        image: justb4/jmeter:5.5
        container_name: jmeter
        environment:
            - JVM_ARGS="-Xms1024m -Xmx2048m"
        volumes:
            - ./transaction_perf.jmx:/tests/api_performance_test.jmx
            - ./transactions.csv:/tests/transactions.csv
            - ./results:/tests/results
            - ./reports:/tests/reports
        command: >
            -n -t /tests/api_performance_test.jmx -l /tests/results/results.jtl -e -o /tests/reports
        depends_on:
            spring-app:
                condition: service_healthy  # Wait for Spring Boot to be healthy
        networks:
            - app-network
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
    tempo:
        image: grafana/tempo
        extra_hosts: ['host.docker.internal:host-gateway']
        command: [ "-config.file=/etc/tempo.yaml" ]
        volumes:
            - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
            - ./tempo-data:/tmp/tempo
        ports:
            - "14268"  # jaeger ingest
            - "9411:9411" # zipkin

    loki:
        image: grafana/loki
        extra_hosts: ['host.docker.internal:host-gateway']
        command: [ "-config.file=/etc/loki/local-config.yaml" ]
        ports:
            - "3100:3100"                                   # loki needs to be exposed so it receives logs
        environment:
            - JAEGER_AGENT_HOST=tempo
            - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1

    prometheus:
        image: prom/prometheus
        extra_hosts: ['host.docker.internal:host-gateway']
        command:
            - --enable-feature=exemplar-storage
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        ports:
            - "9090:9090"

    grafana:
        image: grafana/grafana
        extra_hosts: ['host.docker.internal:host-gateway']
        volumes:
            - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
            - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
        ports:
            - "3000:3000"
# Prometheus: http://localhost:9090/
# Grafana: http://localhost:3000/
